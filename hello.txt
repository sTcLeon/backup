L 	光标移动到这个屏幕的最下方那一行的第一个字符
             O在上面一行输入
I 在行首输入   i在字前输入  a在字后输入   A在行后输入
             o在下面一行输入
 列出目录所有文件，包含以.开始的隐藏文件
h 或 向左箭头键(←) 	光标向左移动一个字符
j 或 向下箭头键(↓) 	光标向下移动一个字符
k 或 向上箭头键(↑) 	光标向上移动一个字符
l 或 向右箭头键(→) 	光标向右移动一个字符
如果你将右手放在键盘上的话，你会发现 hjkl 是排列在一起的，因此可以使用这四个按钮来移动光标。 如果想要进行多次移动的话，例如向下移动 30 行，可以使用 "30j" 或 "30↓" 的组合按键， 亦即加上想要进行的次数(数字)后，按下动作即可！
[Ctrl] + [f] 	屏幕『向下』移动一页，相当于 [Page Down]按键 (常用)
[Ctrl] + [b] 	屏幕『向上』移动一页，相当于 [Page Up] 按键 (常用)
[Ctrl] + [d] 	屏幕『向下』移动半页
[Ctrl] + [u] 	屏幕『向上』移动半页
+ 	光标移动到非空格符的下一行
- 	光标移动到非空格符的上一行
n<space> 	那个 n 表示『数字』，例如 20 。按下数字后再按空格键，光标会向右移动这一行的 n 个字符。例如 20<space> 则光标会向后面移动 20 个字符距离。
0 或功能键[Home] 	这是数字『 0 』：移动到这一行的最前面字符处 (常用)
$ 或功能键[End] 	移动到这一行的最后面字符处(常用)
H 	光标移动到这个屏幕的最上方那一行的第一个字符
M 	光标移动到这个屏幕的中央那一行的第一个字符
L 	光标移动到这个屏幕的最下方那一行的第一个字符
G 	移动到这个档案的最后一行(常用)
nG 	n 为数字。移动到这个档案的第 n 行。例如 20G 则会移动到这个档案的第 20 行(可配合 :set nu)
gg 	移动到这个档案的第一行，相当于 1G 啊！ (常用)
n<Enter> 	n 为数字。光标向下移动 n 行(常用)

/word 	向光标之下寻找一个名称为 word 的字符串。例如要在档案内搜寻 vbird 这个字符串，就输入 /vbird 即可！ (常用)
?word 	向光标之上寻找一个字符串名称为 word 的字符串。
n 	这个 n 是英文按键。代表重复前一个搜寻的动作。举例来说， 如果刚刚我们执行 /vbird 去向下搜寻 vbird 这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 vbird 的字符串。如果是执行 ?vbird 的话，那么按下 n 则会向上继续搜寻名称为 vbird 的字符串！
N 	这个 N 是英文按键。与 n 刚好相反，为『反向』进行前一个搜寻动作。 例如 /vbird 后，按下 N 则表示『向上』搜寻 vbird 。
使用 /word 配合 n 及 N 是非常有帮助的！可以让你重复的找到一些你搜寻的关键词！
:n1,n2s/word1/word2/g 	n1 与 n2 为数字。在第 n1 与 n2 行之间寻找 word1 这个字符串，并将该字符串取代为 word2 ！举例来说，在 100 到 200 行之间搜寻 vbird 并取代为 VBIRD 则：
『:100,200s/vbird/VBIRD/g』。(常用)
:1,$s/word1/word2/g 或 :%s/word1/word2/g 	从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！(常用)
:1,$s/word1/word2/gc 或 :%s/word1/word2/gc 	从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！且在取代前显示提示字符给用户确认 (confirm) 是否需要取代！(常用)

x, X 	在一行字当中，x 为向后删除一个字符 (相当于 [del] 按键)， X 为向前删除一个字符(相当于 [backspace] 亦即是退格键) (常用)
nx 	n 为数字，连续向后删除 n 个字符。举例来说，我要连续删除 10 个字符， 『10x』。
dd 	剪切游标所在的那一整行(常用)，用 p/P 可以粘贴。
ndd 	n 为数字。剪切光标所在的向下 n 行，例如 20dd 则是剪切 20 行(常用)，用 p/P 可以粘贴。
d1G 	删除光标所在到第一行的所有数据
dG 	删除光标所在到最后一行的所有数据
d$ 	删除游标所在处，到该行的最后一个字符
d0 	那个是数字的 0 ，删除游标所在处，到该行的最前面一个字符
yy 	复制游标所在的那一行(常用)
nyy 	n 为数字。复制光标所在的向下 n 行，例如 20yy 则是复制 20 行(常用)
y1G 	复制游标所在行到第一行的所有数据
yG 	复制游标所在行到最后一行的所有数据
y0 	复制光标所在的那个字符到该行行首的所有数据
y$ 	复制光标所在的那个字符到该行行尾的所有数据
p, P 	p 为将已复制的数据在光标下一行贴上，P 则为贴在游标上一行！ 举例来说，我目前光标在第 20 行，且已经复制了 10 行数据。则按下 p 后， 那 10 行数据会贴在原本的 20 行之后，亦即由 21 行开始贴。但如果是按下 P 呢？ 那么原本的第 20 行会被推到变成 30 行。 (常用)
J 	将光标所在行与下一行的数据结合成同一行
c 	重复删除多个数据，例如向下删除 10 行，[ 10cj ]
u 	复原前一个动作。(常用)
[Ctrl]+r 	重做上一个动作。(常用)
这个 u 与 [Ctrl]+r 是很常用的指令！一个是复原，另一个则是重做一次～ 利用这两个功能按键，你的编辑，嘿嘿！很快乐的啦！
. 	不要怀疑！这就是小数点！意思是重复前一个动作的意思。 如果你想要重复删除、重复贴上等等动作，按下小数点『.』就好了！ (常用)

:w 	将编辑的数据写入硬盘档案中(常用)
:w! 	若文件属性为『只读』时，强制写入该档案。不过，到底能不能写入， 还是跟你对该档案的档案权限有关啊！
:q 	离开 vi (常用)
:q! 	若曾修改过档案，又不想储存，使用 ! 为强制离开不储存档案。
:wq 	储存后离开，若为 :wq! 则为强制储存后离开 (常用)
ZZ 	这是大写的 Z 喔！如果修改过，保存当前文件，然后退出！效果等同于(保存并退出)
ZQ 	不保存，强制退出。效果等同于 :q!。
:w [filename] 	将编辑的数据储存成另一个档案（类似另存新档）
:r [filename] 	在编辑的数据中，读入另一个档案的数据。亦即将 『filename』 这个档案内容加到游标所在行后面
:n1,n2 w [filename] 	将 n1 到 n2 的内容储存成 filename 这个档案。
:! command 	暂时离开 vi 到指令行模式下执行 command 的显示结果！例如
『:! ls /home』即可在 vi 当中察看 /home 底下以 ls 输出的档案信息！

ls -A 列出除.及..的其它文件
ls -r 反序排列
ls -t 以文件修改时间排序
ls -S 以文件大小排序
ls -h 以易读大小显示
ls -l 除了文件名之外，还将文件的权限、所有者、文件大小等信息详细列出来

cd ~ 进入home 
cd - 进入上一次的工作路径
pwd 查看当前路径

mkdir t
mkdir -p /tmp/test/t1/t    -p若不存在则创建
rmdir -p parent/child/child11   -p若删除文件后文件夹为空，则也删除文件夹

mv test.log test1.txt 重命名
mv llog1.txt log2.txt log3.txt /test3 移动
mv * ../ 移动当前文件夹下的所有文件到上一级目录

chmod a+x t.log  增加文件 t.log 所有用户可执行权限
chmod 751 t.log -c（或者：chmod u=rwx,g=rx,o=x t.log -c)
r ：读权限，用数字4表示
w ：写权限，用数字2表示
x ：执行权限，用数字1表示
- ：删除权限，用数字0表示
s ：特殊权限
echo "xxx" >> file.txt 将xxx插入文件末尾
cat file.txt           显示文件内容

pwd 显示当前位置
cd /  切换到根目录
cp file.txt file1.txt 复制
cp -r folder1 folder_copy 递归复制folder1下所有
mv file.txt file1.txt 重命名
rm file1.txt 删除
mkdir folder 创建文件夹
mkdir -p folder1/folder2/folder3 创建嵌套文件夹
rmdir folder                     删除文件夹
rmdir -r folder                  递归删除文件夹
du 列出所有目录和文件
tree 树状图显示目录结构




S H E L L

查看一些系统变量：
echo $HOME 家目录
echo $PATH 系统查找路径
echo $SHELL shell位置
echo $0     shell版本

S H E L L  S C R I P T

 


.bashrc .profile 对于所有用户都有效

bash 切换到正常的bash 用source .bash
fish 切换到fish       用source ~/.config/fish/config.fish



正 则 表 达 式

regexr.com

/./ .表示 除了换行符之外 任意一个字符
/at./   匹配at接一个 除了换行符之外 任意一个字符 
/at[ce0]/  匹配 at 接【】中的任意字符 atc ate at0都会被匹配
/at[a-zA-Z1-3]/  匹配 at 接任意大小写字母和1-3之间的数字
/at[^a-z]/ 匹配 反小写字母 也就是大写字母
/at[^a-zA-Z]/ 匹配除字母外字符
^在【】内表示取反，在【】外表示匹配每一行开头***
\d 表示数字
\D 非数字
\w 字母与数字与下划线
\W 除。。。
\s 空格 TAB
\S 非空格 TAB
^a 匹配行首的a
\.$ 匹配在行尾的. \转译
/^at$/ 一行中只有at两个字母
/\bin/ 以in为开头的单词
/in\b/ 以in为结尾的单词
/\bin\b/ 单独的in
/\Bin\b/ 单词中出现的in
+ 1次或多次
* 0次或多次
? 0或1次
{次数}
{3,5}出现3-5次的
{3,}贪婪匹配 3至无限次
{3,}?非贪婪匹配，匹配到三次就结束

Group
()表示组合
/(at)*/ atatatat...
/(at){3}/ atatat
[] 表示或 |
/[aA]pple/ Apple 或 apple
/Apple|apple/ 同上

数字
/\d{4}/ 四位连续数字
/(\d{4})[-/_.]?(\d{1,2})[-/_.]?(\d{1,2})/ 
2024-12-17
$3-$2-$1
17-13-2024
()对应一个 $ 分组
\1 引用表达式中第一个被捕获的分组

前瞻：
正向：?=  /\$(?=\d+)/  后面是数字的$
负向：?!  /\$(?!\d+)/  后面不是数字的$
后顾：
正向：?<= /(?<=\$)\d+/ 前面是$的数字
负向：?<! /(?<!\$)\d+/ 前面不是$的数字 
          /(?<!\$)\b\d+\b/ 前面不是$的完整数字 


                           G  i  t
git config --global user.name "Name"
git config --global user.email "Email"
git init repo               创建一个新的本地代码仓库
echo xxx > file.txt         创建一个任意文件


git add file.txt            加载file这个文件到暂存区
git add .                   加载所有文件到暂存区
git commit -m "随便说点啥"  将暂存区提交到本地仓库 带注释
git commit -a               加载到暂存区并提交
git commit -am "随便说点啥" 加载到暂存区并提交 带注释

git status                  仓库状态
git log                     提交历史
        --oneline           简洁显示
git ls-files                查看暂存区内容

git reset --soft  乱码 (HEAD^上一个版本)  只回退到指定的提交历史 乱码由git log中得到
git reset --mixed 乱码                    回退到指定提交历史，暂存区清空
git reset --hard  乱码                    回退到指定提交，用指定提交覆盖暂存区和本地工作目录
git reflog        得到万能乱码

git diff               查看工作目录中的更改
git diff HEAD          查看工作目录和暂存区的不同
git diff --cached      查看暂存区和版本库的不同
git diff HEAD~ HEAD    和上一个版本作比较
git diff HEAD~2 HEAD    和上2个版本作比较
git diff HEAD^ HEAD    和上一个版本作比较
git diff 乱码1 乱码2
git diff 乱码1 HEAD
git diff HEAD~ HEAD file.txt   单个文件和上一个版本作比较

删除
(rm file.txt    先删本地
 git add .      提交删除只暂存区)
git rm file.txt                   删本地+暂存区
git commit -m "删除file"  提交删除至仓库 
 
忽略
echo file.log > .gitignore   忽略file.log这个文件
echo *.log >> .gitignore     忽略所以log格式文件
echo temp/ >> .gitignore     忽略文件夹

